# -*- mode: org; fill-column: 78; -*-
# Time-stamp: <2023-03-26 15:46:28 krylon>
#
#+TAGS: optimize(o) refactor(r) bug(b) feature(f) architecture(a)
#+TAGS: web(w) database(d) javascript(j)
#+TODO: TODO(t) IMPLEMENT(i) TEST(e) RESEARCH(r) | DONE(d)
#+TODO: MEDITATE(m) PLANNING(p) REFINE(n) | FAILED(f) CANCELLED(c) SUSPENDED(s)
#+TODO: EXPERIMENT(x) |
#+PRIORITIES: A G D

* Guang
** Clocktable
   #+BEGIN: clocktable :scope file :maxlevel 20
   #+CAPTION: Clock summary at [2023-03-20 Mo 20:16]
   | Headline                           | Time       |         |          |          |          |          |
   |------------------------------------+------------+---------+----------+----------+----------+----------|
   | *Total time*                       | *6d 20:07* |         |          |          |          |          |
   |------------------------------------+------------+---------+----------+----------+----------+----------|
   | Guang                              | 6d 20:07   |         |          |          |          |          |
   | \_  Components [9/10]              |            | 6d 3:46 |          |          |          |          |
   | \_    Database [3/3]               |            |         | 1d 23:17 |          |          |          |
   | \_      Cache for Generator        |            |         |          | 1d 22:22 |          |          |
   | \_      SQLite                     |            |         |          |     0:44 |          |          |
   | \_      Pool                       |            |         |          |     0:11 |          |          |
   | \_    Web interface [6/7]          |            |         |  4d 4:29 |          |          |          |
   | \_      Beautify [0/2]             |            |         |          |    14:45 |          |          |
   | \_        Messages                 |            |         |          |          |     4:51 |          |
   | \_        Control Panel            |            |         |          |          |     9:54 |          |
   | \_      Major overhaul [5/5]       |            |         |          |  3d 9:29 |          |          |
   | \_        Live updates             |            |         |          |          |  1d 8:10 |          |
   | \_        Knobs and Switches [2/2] |            |         |          |          | 1d 21:11 |          |
   | \_          UI                     |            |         |          |          |          | 1d 21:11 |
   | \_        Bootstrap and friends    |            |         |          |          |     4:08 |          |
   | \_      Embed                      |            |         |          |     4:15 |          |          |
   | \_  Major cleanup [2/2]            |            |    0:03 |          |          |          |          |
   | \_        Package                  |            |         |          |          |     0:03 |          |
   | \_  Analysis [0/2]                 |            |   16:18 |          |          |          |          |
   | \_    OS detection                 |            |         |     1:47 |          |          |          |
   | \_    Refactoring [2/2]            |            |         |    10:25 |          |          |          |
   | \_      Packages                   |            |         |          |     7:38 |          |          |
   | \_      Linter                     |            |         |          |     2:47 |          |          |
   #+END:
** Diary
*** [2022-10-26 Mi 15:56]
    I haven't touched this code in a pretty long time, before I can move on,
    I'm going to reorganize it so it conforms to the layout I used in my more
    recent projects, plus the web interface is going to need *a lot* of work.
** Components [9/10]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
*** Database [3/3]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
**** DONE Cache for Generator
      CLOSED: [2022-12-22 Do 02:08]
      :LOGBOOK:
      CLOCK: [2022-12-20 Di 18:09]--[2022-12-21 Mi 20:57] => 26:48
      CLOCK: [2022-11-26 Sa 18:56]--[2022-11-27 So 03:58] =>  9:02
      CLOCK: [2022-11-25 Fr 20:14]--[2022-11-26 Sa 03:09] =>  6:55
      CLOCK: [2022-11-24 Do 22:05]--[2022-11-25 Fr 01:42] =>  3:37
      :END:
      I would like to replace the cache used by the Generator. I currently use
      KyotoCabinet, because it was the first key-value store I could find when
      I wrote luang in C that was safe to use from multiple threads and
      supported transactions.
      But that library is not available everywhere, sometimes it's a pain to
      get it installed, and I'm almost certain it has been deprecated several
      times over by now.
      So I would like to replace it with something written in pure Go so I get
      rid of the external dependency.
      I'm thinking of boltdb, or its fork bbolt, but I'd like something that
      supports a few more data types than just byte slices. 
**** DONE SQLite
     CLOSED: [2022-10-27 Do 18:36]
     :LOGBOOK:
     CLOCK: [2022-10-27 Do 17:52]--[2022-10-27 Do 18:36] =>  0:44
     :END:
     The library I use for the SQLite bindings is kind of out of date, I think
**** DONE Pool
     CLOSED: [2022-10-31 Mo 19:49]
     :LOGBOOK:
     CLOCK: [2022-10-31 Mo 19:38]--[2022-10-31 Mo 19:49] =>  0:11
     :END:
     The web frontend still uses a sync.Pool. Let's fix that.
*** Web interface [6/7]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
**** TODO Beautify [0/2]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
     While bootstrap makes it reasonably easy to make the interface not look
     completely crappy, it still looks fairly crappy. I should do at least a
     little about that, if nothing else, I may learn something about web
     development. Well, HTML/CSS anyway.
***** TODO Messages
      :LOGBOOK:
      CLOCK: [2023-01-11 Mi 20:00]--[2023-01-11 Mi 20:35] =>  0:35
      CLOCK: [2023-01-10 Di 19:14]--[2023-01-10 Di 20:56] =>  1:42
      CLOCK: [2023-01-09 Mo 18:07]--[2023-01-09 Mo 20:07] =>  2:00
      CLOCK: [2023-01-09 Mo 18:06]--[2023-01-09 Mo 18:07] =>  0:01
      CLOCK: [2023-01-06 Fr 17:54]--[2023-01-06 Fr 18:27] =>  0:33
      :END:
      I want a dedicated area for displaying messages, like a console.

      [2023-01-11 Mi 20:34]
      First, very rough version works. Needs a fair bit of work to make it
      pretty, but for now it is sufficient.
***** TODO Control Panel
      :LOGBOOK:
      CLOCK: [2023-01-05 Do 19:05]--[2023-01-06 Fr 00:32] =>  5:27
      CLOCK: [2023-01-05 Do 11:58]--[2023-01-05 Do 12:12] =>  0:14
      CLOCK: [2023-01-04 Mi 19:38]--[2023-01-04 Mi 22:10] =>  2:32
      CLOCK: [2023-01-04 Mi 17:29]--[2023-01-04 Mi 19:10] =>  1:41
      :END:
      
**** Major overhaul [5/5]
     The web interface is in dire need of a makeover. I'm not a very
     proficient web developer, but I was even less so when I first wrote this
     baby, and it is ... embarrassing to look at.
***** DONE Live updates
      CLOSED: [2022-11-08 Di 18:54]
      :LOGBOOK:
      CLOCK: [2022-11-08 Di 16:16]--[2022-11-08 Di 18:54] =>  2:38
      CLOCK: [2022-11-07 Mo 18:41]--[2022-11-08 Di 02:16] =>  7:35
      CLOCK: [2022-11-05 Sa 20:10]--[2022-11-06 So 03:16] =>  7:06
      CLOCK: [2022-11-04 Fr 21:00]--[2022-11-05 Sa 03:15] =>  6:15
      CLOCK: [2022-11-04 Fr 18:45]--[2022-11-04 Fr 19:20] =>  0:35
      CLOCK: [2022-11-03 Do 19:05]--[2022-11-03 Do 19:08] =>  0:03
      CLOCK: [2022-11-02 Mi 19:56]--[2022-11-03 Do 03:54] =>  7:58
      :END:
      I want to update the web interface continually as the backend is
      running.

      [2022-11-08 Di 18:51]
      That mostly works now, I like it. *But* what if it is the first time a
      port has been scanned successfully, and no entry in the ToC nor table of
      results exists for the port? Do I want to handle that special case?
      I'm thinking this should be a very rare occurrence, so I treat is as
      negligible for now.
***** DONE Knobs and Switches [2/2]
      CLOSED: [2022-11-26 Sa 18:53]
      I want to be able to basically micro-manage the backend from the web
      interface. For starts, I want to spawn or discard worker goroutines for
      the various components on the fly. I have done /a little/ preliminary
      work for that, but it needs a whole lot of follow-through.
      I think this time I will start from the frontend to see how I want to
      interact with the inner workings, in the naive hope I will end up with a
      more ergonomic interface.
      ...
      Strike that. It doesn't work like that, I need work my from the inside
      out.
****** DONE UI
       CLOSED: [2022-11-24 Do 21:01]
       :LOGBOOK:
       CLOCK: [2022-11-24 Do 18:36]--[2022-11-24 Do 21:01] =>  2:25
       CLOCK: [2022-11-23 Mi 19:58]--[2022-11-24 Do 00:49] =>  4:51
       CLOCK: [2022-11-17 Do 16:44]--[2022-11-17 Do 21:50] =>  5:06
       CLOCK: [2022-11-14 Mo 16:09]--[2022-11-14 Mo 23:06] =>  6:57
       CLOCK: [2022-11-13 So 16:03]--[2022-11-13 So 20:24] =>  4:21
       CLOCK: [2022-11-12 Sa 19:15]--[2022-11-12 Sa 23:20] =>  4:05
       CLOCK: [2022-11-11 Fr 18:39]--[2022-11-12 Sa 02:44] =>  8:05
       CLOCK: [2022-11-10 Do 20:07]--[2022-11-11 Fr 00:11] =>  4:04
       CLOCK: [2022-11-09 Mi 19:20]--[2022-11-10 Do 00:07] =>  4:47
       CLOCK: [2022-11-09 Mi 18:47]--[2022-11-09 Mi 19:17] =>  0:30
       :END:
       I need a kind of "control panel", basically a few spinbuttons.
       [2022-11-14 Mo 23:07] -- mostly works, but it looks a bit ugly.
****** DONE Backend
       CLOSED: [2022-11-17 Do 16:44]
       But I also need a way to reliably spawn and terminate workers in the
       backend.
***** DONE Bootstrap and friends
      CLOSED: [2022-11-02 Mi 19:54]
      :LOGBOOK:
      CLOCK: [2022-10-31 Mo 22:57]--[2022-11-01 Di 02:51] =>  3:54
      CLOCK: [2022-10-31 Mo 20:44]--[2022-10-31 Mo 20:58] =>  0:14
      :END:
      In my more recent Go projects, I had some kind of scaffolding for the
      web interface that I would like to import.
**** DONE Embed
     CLOSED: [2022-10-26 Mi 20:42]
     :LOGBOOK:
     CLOCK: [2022-10-26 Mi 16:27]--[2022-10-26 Mi 20:42] =>  4:15
     :END:
     I use a Perl script to roll all of my assets into a Go variable, which
     became unneccessary when Go gained go:embed. Still need to make a few
     adjustments to make that step, then I can remove the script.

** Major cleanup [2/2]                                             :refactor:
     I need to fix/refactor a couple of things.
***** DONE Package
      CLOSED: [2022-10-27 Do 19:45]
      :LOGBOOK:
      CLOCK: [2022-10-27 Do 19:41]--[2022-10-27 Do 19:44] =>  0:03
      :END:
      I need to move the database into a separate package
***** DONE Names
      CLOSED: [2022-10-31 Mo 19:57]
      I need to change a bunch of names.
** Analysis [0/2]                                                   :feature: 
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2023-03-20 Mo 16:09]--[2023-03-20 Mo 20:15] =>  4:06
    :END:
    [2023-01-03 Di] Now that we have most of the major outstanding issues
    resolved, it would be nice to look into the reason I theoretically started
    this project in the first place, namely to perform some analyses on the
    data we collect.
*** TODO OS detection
    :LOGBOOK:
    CLOCK: [2023-03-18 Sa 21:57]--[2023-03-18 Sa 23:32] =>  1:35
    CLOCK: [2023-03-18 Sa 18:50]--[2023-03-18 Sa 19:02] =>  0:12
    :END:
    I already did some preliminary work to detect a host's operating system.
    [2023-03-20 Mo 20:15] Seems to work now, I still need to polish it
    someone, as performance is probably dreadful.
*** TODO Detect interesting hosts
     This could, for starters, mean to detect hosts running exotic operating
     systems. In a prior iteration of this program I had managed to find one
     IBM mainframe running z/OS and one host running OpenVMS. Sometimes,
     interesting devices can be found where it's not clear what OS they are
     running at all. Also, outdated operating systems, such as the odd Windows
     XP machine, or RHEL 6 or something.
     In the longer run, it might be interesting to correlate the versions of
     services and the OS with CVE entries to see if we can find
     vulnerabilities.
*** Refactoring [2/2]                                              :refactor:
**** DONE Packages
     CLOSED: [2022-10-31 Mo 19:57]
     :LOGBOOK:
     CLOCK: [2022-10-29 Sa 18:01]--[2022-10-30 So 00:33] =>  6:32
     CLOCK: [2022-10-27 Do 19:45]--[2022-10-27 Do 20:51] =>  1:06
     :END:
     I need break up the application into more packages, the current state is
     just repulsive from an aesthetic perspective.
**** DONE Linter
     CLOSED: [2022-10-31 Mo 19:24]
     :LOGBOOK:
     CLOCK: [2022-10-31 Mo 18:11]--[2022-10-31 Mo 19:24] =>  1:13
     CLOCK: [2022-10-30 So 20:25]--[2022-10-30 So 21:59] =>  1:34
     :END:
     Apparently I was not in the habit of using a linter when I wrote guang
     initially. So I have to do a lot of simple but tedious work to do.
** Bugs
